{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useTheme } from '@mui/material/styles';\nimport { useValidation } from '../useValidation';\nimport { useUtils } from '../useUtils';\nimport { adjustSectionValue, getSectionOrder } from './useField.utils';\nimport { useFieldState } from './useFieldState';\nimport { useFieldCharacterEditing } from './useFieldCharacterEditing';\nimport { useFieldV7TextField } from './useFieldV7TextField';\nimport { useFieldV6TextField } from './useFieldV6TextField';\nexport const useField = params => {\n  const utils = useUtils();\n  const {\n    internalProps,\n    internalProps: {\n      unstableFieldRef,\n      minutesStep,\n      enableAccessibleFieldDOMStructure = false,\n      disabled = false,\n      readOnly = false\n    },\n    forwardedProps: {\n      onKeyDown,\n      error,\n      clearable,\n      onClear\n    },\n    fieldValueManager,\n    valueManager,\n    validator\n  } = params;\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const stateResponse = useFieldState(params);\n  const {\n    state,\n    activeSectionIndex,\n    parsedSelectedSections,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries,\n    localizedDigits,\n    timezone\n  } = stateResponse;\n  const characterEditingResponse = useFieldCharacterEditing({\n    sections: state.sections,\n    updateSectionValue,\n    sectionsValueBoundaries,\n    localizedDigits,\n    setTempAndroidValueStr,\n    timezone\n  });\n  const {\n    resetCharacterQuery\n  } = characterEditingResponse;\n  const areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);\n  const useFieldTextField = enableAccessibleFieldDOMStructure ? useFieldV7TextField : useFieldV6TextField;\n  const sectionOrder = React.useMemo(() => getSectionOrder(state.sections, isRTL && !enableAccessibleFieldDOMStructure), [state.sections, isRTL, enableAccessibleFieldDOMStructure]);\n  const {\n    returnedValue,\n    interactions\n  } = useFieldTextField(_extends({}, params, stateResponse, characterEditingResponse, {\n    areAllSectionsEmpty,\n    sectionOrder\n  }));\n  const handleContainerKeyDown = useEventCallback(event => {\n    onKeyDown?.(event);\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select all\n      case (event.ctrlKey || event.metaKey) && event.key.toLowerCase() === 'a' && !event.shiftKey && !event.altKey:\n        {\n          // prevent default to make sure that the next line \"select all\" while updating\n          // the internal state at the same time.\n          event.preventDefault();\n          setSelectedSections('all');\n          break;\n        }\n\n      // Move selection to next section\n      case event.key === 'ArrowRight':\n        {\n          event.preventDefault();\n          if (parsedSelectedSections == null) {\n            setSelectedSections(sectionOrder.startIndex);\n          } else if (parsedSelectedSections === 'all') {\n            setSelectedSections(sectionOrder.endIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[parsedSelectedSections].rightIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Move selection to previous section\n      case event.key === 'ArrowLeft':\n        {\n          event.preventDefault();\n          if (parsedSelectedSections == null) {\n            setSelectedSections(sectionOrder.endIndex);\n          } else if (parsedSelectedSections === 'all') {\n            setSelectedSections(sectionOrder.startIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[parsedSelectedSections].leftIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Reset the value of the selected section\n      case event.key === 'Delete':\n        {\n          event.preventDefault();\n          if (readOnly) {\n            break;\n          }\n          if (parsedSelectedSections == null || parsedSelectedSections === 'all') {\n            clearValue();\n          } else {\n            clearActiveSection();\n          }\n          resetCharacterQuery();\n          break;\n        }\n\n      // Increment / decrement the selected section value\n      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly || activeSectionIndex == null) {\n            break;\n          }\n          const activeSection = state.sections[activeSectionIndex];\n          const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n          const newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, localizedDigits, activeDateManager.date, {\n            minutesStep\n          });\n          updateSectionValue({\n            activeSection,\n            newSectionValue,\n            shouldGoToNextSection: false\n          });\n          break;\n        }\n    }\n  });\n  useEnhancedEffect(() => {\n    interactions.syncSelectionToDOM();\n  });\n  const validationError = useValidation(_extends({}, internalProps, {\n    value: state.value,\n    timezone\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  const inputError = React.useMemo(() => {\n    // only override when `error` is undefined.\n    // in case of multi input fields, the `error` value is provided externally and will always be defined.\n    if (error !== undefined) {\n      return error;\n    }\n    return valueManager.hasError(validationError);\n  }, [valueManager, validationError, error]);\n  React.useEffect(() => {\n    if (!inputError && activeSectionIndex == null) {\n      resetCharacterQuery();\n    }\n  }, [state.referenceValue, activeSectionIndex, inputError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // If `tempValueStrAndroid` is still defined for some section when running `useEffect`,\n  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.\n  // This causes a small flickering on Android,\n  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.\n  React.useEffect(() => {\n    if (state.tempValueStrAndroid != null && activeSectionIndex != null) {\n      resetCharacterQuery();\n      clearActiveSection();\n    }\n  }, [state.sections]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useImperativeHandle(unstableFieldRef, () => ({\n    getSections: () => state.sections,\n    getActiveSectionIndex: interactions.getActiveSectionIndexFromDOM,\n    setSelectedSections: interactions.setSelectedSections,\n    focusField: interactions.focusField,\n    isFieldFocused: interactions.isFieldFocused\n  }));\n  const handleClearValue = useEventCallback((event, ...args) => {\n    event.preventDefault();\n    onClear?.(event, ...args);\n    clearValue();\n    if (!interactions.isFieldFocused()) {\n      // setSelectedSections is called internally\n      interactions.focusField(0);\n    } else {\n      setSelectedSections(sectionOrder.startIndex);\n    }\n  });\n  const commonForwardedProps = {\n    onKeyDown: handleContainerKeyDown,\n    onClear: handleClearValue,\n    error: inputError,\n    clearable: Boolean(clearable && !areAllSectionsEmpty && !readOnly && !disabled)\n  };\n  const commonAdditionalProps = {\n    disabled,\n    readOnly\n  };\n  return _extends({}, params.forwardedProps, commonForwardedProps, commonAdditionalProps, returnedValue);\n};","map":{"version":3,"names":["_extends","React","useEnhancedEffect","useEventCallback","useTheme","useValidation","useUtils","adjustSectionValue","getSectionOrder","useFieldState","useFieldCharacterEditing","useFieldV7TextField","useFieldV6TextField","useField","params","utils","internalProps","unstableFieldRef","minutesStep","enableAccessibleFieldDOMStructure","disabled","readOnly","forwardedProps","onKeyDown","error","clearable","onClear","fieldValueManager","valueManager","validator","theme","isRTL","direction","stateResponse","state","activeSectionIndex","parsedSelectedSections","setSelectedSections","clearValue","clearActiveSection","updateSectionValue","setTempAndroidValueStr","sectionsValueBoundaries","localizedDigits","timezone","characterEditingResponse","sections","resetCharacterQuery","areAllSectionsEmpty","areValuesEqual","value","emptyValue","useFieldTextField","sectionOrder","useMemo","returnedValue","interactions","handleContainerKeyDown","event","ctrlKey","metaKey","key","toLowerCase","shiftKey","altKey","preventDefault","startIndex","endIndex","nextSectionIndex","neighbors","rightIndex","leftIndex","includes","activeSection","activeDateManager","getActiveDateManager","newSectionValue","date","shouldGoToNextSection","syncSelectionToDOM","validationError","isSameError","defaultErrorState","inputError","undefined","hasError","useEffect","referenceValue","tempValueStrAndroid","useImperativeHandle","getSections","getActiveSectionIndex","getActiveSectionIndexFromDOM","focusField","isFieldFocused","handleClearValue","args","commonForwardedProps","Boolean","commonAdditionalProps"],"sources":["C:/Users/shun1/OneDrive/デスクトップ/React/mui-sample/node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useTheme } from '@mui/material/styles';\nimport { useValidation } from '../useValidation';\nimport { useUtils } from '../useUtils';\nimport { adjustSectionValue, getSectionOrder } from './useField.utils';\nimport { useFieldState } from './useFieldState';\nimport { useFieldCharacterEditing } from './useFieldCharacterEditing';\nimport { useFieldV7TextField } from './useFieldV7TextField';\nimport { useFieldV6TextField } from './useFieldV6TextField';\nexport const useField = params => {\n  const utils = useUtils();\n  const {\n    internalProps,\n    internalProps: {\n      unstableFieldRef,\n      minutesStep,\n      enableAccessibleFieldDOMStructure = false,\n      disabled = false,\n      readOnly = false\n    },\n    forwardedProps: {\n      onKeyDown,\n      error,\n      clearable,\n      onClear\n    },\n    fieldValueManager,\n    valueManager,\n    validator\n  } = params;\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const stateResponse = useFieldState(params);\n  const {\n    state,\n    activeSectionIndex,\n    parsedSelectedSections,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries,\n    localizedDigits,\n    timezone\n  } = stateResponse;\n  const characterEditingResponse = useFieldCharacterEditing({\n    sections: state.sections,\n    updateSectionValue,\n    sectionsValueBoundaries,\n    localizedDigits,\n    setTempAndroidValueStr,\n    timezone\n  });\n  const {\n    resetCharacterQuery\n  } = characterEditingResponse;\n  const areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);\n  const useFieldTextField = enableAccessibleFieldDOMStructure ? useFieldV7TextField : useFieldV6TextField;\n  const sectionOrder = React.useMemo(() => getSectionOrder(state.sections, isRTL && !enableAccessibleFieldDOMStructure), [state.sections, isRTL, enableAccessibleFieldDOMStructure]);\n  const {\n    returnedValue,\n    interactions\n  } = useFieldTextField(_extends({}, params, stateResponse, characterEditingResponse, {\n    areAllSectionsEmpty,\n    sectionOrder\n  }));\n  const handleContainerKeyDown = useEventCallback(event => {\n    onKeyDown?.(event);\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select all\n      case (event.ctrlKey || event.metaKey) && event.key.toLowerCase() === 'a' && !event.shiftKey && !event.altKey:\n        {\n          // prevent default to make sure that the next line \"select all\" while updating\n          // the internal state at the same time.\n          event.preventDefault();\n          setSelectedSections('all');\n          break;\n        }\n\n      // Move selection to next section\n      case event.key === 'ArrowRight':\n        {\n          event.preventDefault();\n          if (parsedSelectedSections == null) {\n            setSelectedSections(sectionOrder.startIndex);\n          } else if (parsedSelectedSections === 'all') {\n            setSelectedSections(sectionOrder.endIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[parsedSelectedSections].rightIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Move selection to previous section\n      case event.key === 'ArrowLeft':\n        {\n          event.preventDefault();\n          if (parsedSelectedSections == null) {\n            setSelectedSections(sectionOrder.endIndex);\n          } else if (parsedSelectedSections === 'all') {\n            setSelectedSections(sectionOrder.startIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[parsedSelectedSections].leftIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Reset the value of the selected section\n      case event.key === 'Delete':\n        {\n          event.preventDefault();\n          if (readOnly) {\n            break;\n          }\n          if (parsedSelectedSections == null || parsedSelectedSections === 'all') {\n            clearValue();\n          } else {\n            clearActiveSection();\n          }\n          resetCharacterQuery();\n          break;\n        }\n\n      // Increment / decrement the selected section value\n      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly || activeSectionIndex == null) {\n            break;\n          }\n          const activeSection = state.sections[activeSectionIndex];\n          const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n          const newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, localizedDigits, activeDateManager.date, {\n            minutesStep\n          });\n          updateSectionValue({\n            activeSection,\n            newSectionValue,\n            shouldGoToNextSection: false\n          });\n          break;\n        }\n    }\n  });\n  useEnhancedEffect(() => {\n    interactions.syncSelectionToDOM();\n  });\n  const validationError = useValidation(_extends({}, internalProps, {\n    value: state.value,\n    timezone\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  const inputError = React.useMemo(() => {\n    // only override when `error` is undefined.\n    // in case of multi input fields, the `error` value is provided externally and will always be defined.\n    if (error !== undefined) {\n      return error;\n    }\n    return valueManager.hasError(validationError);\n  }, [valueManager, validationError, error]);\n  React.useEffect(() => {\n    if (!inputError && activeSectionIndex == null) {\n      resetCharacterQuery();\n    }\n  }, [state.referenceValue, activeSectionIndex, inputError]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // If `tempValueStrAndroid` is still defined for some section when running `useEffect`,\n  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.\n  // This causes a small flickering on Android,\n  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.\n  React.useEffect(() => {\n    if (state.tempValueStrAndroid != null && activeSectionIndex != null) {\n      resetCharacterQuery();\n      clearActiveSection();\n    }\n  }, [state.sections]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useImperativeHandle(unstableFieldRef, () => ({\n    getSections: () => state.sections,\n    getActiveSectionIndex: interactions.getActiveSectionIndexFromDOM,\n    setSelectedSections: interactions.setSelectedSections,\n    focusField: interactions.focusField,\n    isFieldFocused: interactions.isFieldFocused\n  }));\n  const handleClearValue = useEventCallback((event, ...args) => {\n    event.preventDefault();\n    onClear?.(event, ...args);\n    clearValue();\n    if (!interactions.isFieldFocused()) {\n      // setSelectedSections is called internally\n      interactions.focusField(0);\n    } else {\n      setSelectedSections(sectionOrder.startIndex);\n    }\n  });\n  const commonForwardedProps = {\n    onKeyDown: handleContainerKeyDown,\n    onClear: handleClearValue,\n    error: inputError,\n    clearable: Boolean(clearable && !areAllSectionsEmpty && !readOnly && !disabled)\n  };\n  const commonAdditionalProps = {\n    disabled,\n    readOnly\n  };\n  return _extends({}, params.forwardedProps, commonForwardedProps, commonAdditionalProps, returnedValue);\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,kBAAkB,EAAEC,eAAe,QAAQ,kBAAkB;AACtE,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,OAAO,MAAMC,QAAQ,GAAGC,MAAM,IAAI;EAChC,MAAMC,KAAK,GAAGT,QAAQ,CAAC,CAAC;EACxB,MAAM;IACJU,aAAa;IACbA,aAAa,EAAE;MACbC,gBAAgB;MAChBC,WAAW;MACXC,iCAAiC,GAAG,KAAK;MACzCC,QAAQ,GAAG,KAAK;MAChBC,QAAQ,GAAG;IACb,CAAC;IACDC,cAAc,EAAE;MACdC,SAAS;MACTC,KAAK;MACLC,SAAS;MACTC;IACF,CAAC;IACDC,iBAAiB;IACjBC,YAAY;IACZC;EACF,CAAC,GAAGf,MAAM;EACV,MAAMgB,KAAK,GAAG1B,QAAQ,CAAC,CAAC;EACxB,MAAM2B,KAAK,GAAGD,KAAK,CAACE,SAAS,KAAK,KAAK;EACvC,MAAMC,aAAa,GAAGxB,aAAa,CAACK,MAAM,CAAC;EAC3C,MAAM;IACJoB,KAAK;IACLC,kBAAkB;IAClBC,sBAAsB;IACtBC,mBAAmB;IACnBC,UAAU;IACVC,kBAAkB;IAClBC,kBAAkB;IAClBC,sBAAsB;IACtBC,uBAAuB;IACvBC,eAAe;IACfC;EACF,CAAC,GAAGX,aAAa;EACjB,MAAMY,wBAAwB,GAAGnC,wBAAwB,CAAC;IACxDoC,QAAQ,EAAEZ,KAAK,CAACY,QAAQ;IACxBN,kBAAkB;IAClBE,uBAAuB;IACvBC,eAAe;IACfF,sBAAsB;IACtBG;EACF,CAAC,CAAC;EACF,MAAM;IACJG;EACF,CAAC,GAAGF,wBAAwB;EAC5B,MAAMG,mBAAmB,GAAGpB,YAAY,CAACqB,cAAc,CAAClC,KAAK,EAAEmB,KAAK,CAACgB,KAAK,EAAEtB,YAAY,CAACuB,UAAU,CAAC;EACpG,MAAMC,iBAAiB,GAAGjC,iCAAiC,GAAGR,mBAAmB,GAAGC,mBAAmB;EACvG,MAAMyC,YAAY,GAAGpD,KAAK,CAACqD,OAAO,CAAC,MAAM9C,eAAe,CAAC0B,KAAK,CAACY,QAAQ,EAAEf,KAAK,IAAI,CAACZ,iCAAiC,CAAC,EAAE,CAACe,KAAK,CAACY,QAAQ,EAAEf,KAAK,EAAEZ,iCAAiC,CAAC,CAAC;EAClL,MAAM;IACJoC,aAAa;IACbC;EACF,CAAC,GAAGJ,iBAAiB,CAACpD,QAAQ,CAAC,CAAC,CAAC,EAAEc,MAAM,EAAEmB,aAAa,EAAEY,wBAAwB,EAAE;IAClFG,mBAAmB;IACnBK;EACF,CAAC,CAAC,CAAC;EACH,MAAMI,sBAAsB,GAAGtD,gBAAgB,CAACuD,KAAK,IAAI;IACvDnC,SAAS,GAAGmC,KAAK,CAAC;;IAElB;IACA,QAAQ,IAAI;MACV;MACA,KAAK,CAACA,KAAK,CAACC,OAAO,IAAID,KAAK,CAACE,OAAO,KAAKF,KAAK,CAACG,GAAG,CAACC,WAAW,CAAC,CAAC,KAAK,GAAG,IAAI,CAACJ,KAAK,CAACK,QAAQ,IAAI,CAACL,KAAK,CAACM,MAAM;QAC1G;UACE;UACA;UACAN,KAAK,CAACO,cAAc,CAAC,CAAC;UACtB5B,mBAAmB,CAAC,KAAK,CAAC;UAC1B;QACF;;MAEF;MACA,KAAKqB,KAAK,CAACG,GAAG,KAAK,YAAY;QAC7B;UACEH,KAAK,CAACO,cAAc,CAAC,CAAC;UACtB,IAAI7B,sBAAsB,IAAI,IAAI,EAAE;YAClCC,mBAAmB,CAACgB,YAAY,CAACa,UAAU,CAAC;UAC9C,CAAC,MAAM,IAAI9B,sBAAsB,KAAK,KAAK,EAAE;YAC3CC,mBAAmB,CAACgB,YAAY,CAACc,QAAQ,CAAC;UAC5C,CAAC,MAAM;YACL,MAAMC,gBAAgB,GAAGf,YAAY,CAACgB,SAAS,CAACjC,sBAAsB,CAAC,CAACkC,UAAU;YAClF,IAAIF,gBAAgB,KAAK,IAAI,EAAE;cAC7B/B,mBAAmB,CAAC+B,gBAAgB,CAAC;YACvC;UACF;UACA;QACF;;MAEF;MACA,KAAKV,KAAK,CAACG,GAAG,KAAK,WAAW;QAC5B;UACEH,KAAK,CAACO,cAAc,CAAC,CAAC;UACtB,IAAI7B,sBAAsB,IAAI,IAAI,EAAE;YAClCC,mBAAmB,CAACgB,YAAY,CAACc,QAAQ,CAAC;UAC5C,CAAC,MAAM,IAAI/B,sBAAsB,KAAK,KAAK,EAAE;YAC3CC,mBAAmB,CAACgB,YAAY,CAACa,UAAU,CAAC;UAC9C,CAAC,MAAM;YACL,MAAME,gBAAgB,GAAGf,YAAY,CAACgB,SAAS,CAACjC,sBAAsB,CAAC,CAACmC,SAAS;YACjF,IAAIH,gBAAgB,KAAK,IAAI,EAAE;cAC7B/B,mBAAmB,CAAC+B,gBAAgB,CAAC;YACvC;UACF;UACA;QACF;;MAEF;MACA,KAAKV,KAAK,CAACG,GAAG,KAAK,QAAQ;QACzB;UACEH,KAAK,CAACO,cAAc,CAAC,CAAC;UACtB,IAAI5C,QAAQ,EAAE;YACZ;UACF;UACA,IAAIe,sBAAsB,IAAI,IAAI,IAAIA,sBAAsB,KAAK,KAAK,EAAE;YACtEE,UAAU,CAAC,CAAC;UACd,CAAC,MAAM;YACLC,kBAAkB,CAAC,CAAC;UACtB;UACAQ,mBAAmB,CAAC,CAAC;UACrB;QACF;;MAEF;MACA,KAAK,CAAC,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAACyB,QAAQ,CAACd,KAAK,CAACG,GAAG,CAAC;QACpF;UACEH,KAAK,CAACO,cAAc,CAAC,CAAC;UACtB,IAAI5C,QAAQ,IAAIc,kBAAkB,IAAI,IAAI,EAAE;YAC1C;UACF;UACA,MAAMsC,aAAa,GAAGvC,KAAK,CAACY,QAAQ,CAACX,kBAAkB,CAAC;UACxD,MAAMuC,iBAAiB,GAAG/C,iBAAiB,CAACgD,oBAAoB,CAAC5D,KAAK,EAAEmB,KAAK,EAAEuC,aAAa,CAAC;UAC7F,MAAMG,eAAe,GAAGrE,kBAAkB,CAACQ,KAAK,EAAE6B,QAAQ,EAAE6B,aAAa,EAAEf,KAAK,CAACG,GAAG,EAAEnB,uBAAuB,EAAEC,eAAe,EAAE+B,iBAAiB,CAACG,IAAI,EAAE;YACtJ3D;UACF,CAAC,CAAC;UACFsB,kBAAkB,CAAC;YACjBiC,aAAa;YACbG,eAAe;YACfE,qBAAqB,EAAE;UACzB,CAAC,CAAC;UACF;QACF;IACJ;EACF,CAAC,CAAC;EACF5E,iBAAiB,CAAC,MAAM;IACtBsD,YAAY,CAACuB,kBAAkB,CAAC,CAAC;EACnC,CAAC,CAAC;EACF,MAAMC,eAAe,GAAG3E,aAAa,CAACL,QAAQ,CAAC,CAAC,CAAC,EAAEgB,aAAa,EAAE;IAChEkC,KAAK,EAAEhB,KAAK,CAACgB,KAAK;IAClBN;EACF,CAAC,CAAC,EAAEf,SAAS,EAAED,YAAY,CAACqD,WAAW,EAAErD,YAAY,CAACsD,iBAAiB,CAAC;EACxE,MAAMC,UAAU,GAAGlF,KAAK,CAACqD,OAAO,CAAC,MAAM;IACrC;IACA;IACA,IAAI9B,KAAK,KAAK4D,SAAS,EAAE;MACvB,OAAO5D,KAAK;IACd;IACA,OAAOI,YAAY,CAACyD,QAAQ,CAACL,eAAe,CAAC;EAC/C,CAAC,EAAE,CAACpD,YAAY,EAAEoD,eAAe,EAAExD,KAAK,CAAC,CAAC;EAC1CvB,KAAK,CAACqF,SAAS,CAAC,MAAM;IACpB,IAAI,CAACH,UAAU,IAAIhD,kBAAkB,IAAI,IAAI,EAAE;MAC7CY,mBAAmB,CAAC,CAAC;IACvB;EACF,CAAC,EAAE,CAACb,KAAK,CAACqD,cAAc,EAAEpD,kBAAkB,EAAEgD,UAAU,CAAC,CAAC,CAAC,CAAC;;EAE5D;EACA;EACA;EACA;EACAlF,KAAK,CAACqF,SAAS,CAAC,MAAM;IACpB,IAAIpD,KAAK,CAACsD,mBAAmB,IAAI,IAAI,IAAIrD,kBAAkB,IAAI,IAAI,EAAE;MACnEY,mBAAmB,CAAC,CAAC;MACrBR,kBAAkB,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACL,KAAK,CAACY,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEtB7C,KAAK,CAACwF,mBAAmB,CAACxE,gBAAgB,EAAE,OAAO;IACjDyE,WAAW,EAAEA,CAAA,KAAMxD,KAAK,CAACY,QAAQ;IACjC6C,qBAAqB,EAAEnC,YAAY,CAACoC,4BAA4B;IAChEvD,mBAAmB,EAAEmB,YAAY,CAACnB,mBAAmB;IACrDwD,UAAU,EAAErC,YAAY,CAACqC,UAAU;IACnCC,cAAc,EAAEtC,YAAY,CAACsC;EAC/B,CAAC,CAAC,CAAC;EACH,MAAMC,gBAAgB,GAAG5F,gBAAgB,CAAC,CAACuD,KAAK,EAAE,GAAGsC,IAAI,KAAK;IAC5DtC,KAAK,CAACO,cAAc,CAAC,CAAC;IACtBvC,OAAO,GAAGgC,KAAK,EAAE,GAAGsC,IAAI,CAAC;IACzB1D,UAAU,CAAC,CAAC;IACZ,IAAI,CAACkB,YAAY,CAACsC,cAAc,CAAC,CAAC,EAAE;MAClC;MACAtC,YAAY,CAACqC,UAAU,CAAC,CAAC,CAAC;IAC5B,CAAC,MAAM;MACLxD,mBAAmB,CAACgB,YAAY,CAACa,UAAU,CAAC;IAC9C;EACF,CAAC,CAAC;EACF,MAAM+B,oBAAoB,GAAG;IAC3B1E,SAAS,EAAEkC,sBAAsB;IACjC/B,OAAO,EAAEqE,gBAAgB;IACzBvE,KAAK,EAAE2D,UAAU;IACjB1D,SAAS,EAAEyE,OAAO,CAACzE,SAAS,IAAI,CAACuB,mBAAmB,IAAI,CAAC3B,QAAQ,IAAI,CAACD,QAAQ;EAChF,CAAC;EACD,MAAM+E,qBAAqB,GAAG;IAC5B/E,QAAQ;IACRC;EACF,CAAC;EACD,OAAOrB,QAAQ,CAAC,CAAC,CAAC,EAAEc,MAAM,CAACQ,cAAc,EAAE2E,oBAAoB,EAAEE,qBAAqB,EAAE5C,aAAa,CAAC;AACxG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}